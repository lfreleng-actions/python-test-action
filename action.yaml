---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# python-test-action
name: 'üß™ Python Test'
description: 'Test a Python Project, generate coverage report'

inputs:
  # Mandatory
  python_version:
    # A matrix Python build version should be passed as input
    description: 'Python version used to run test'
    required: true
    # type: string
  # Optional
  permit_fail:
    description: 'Continue even when one or more tests fails'
    required: false
    # type: boolean
    default: 'false'
  report_artefact:
    description: 'Uploads test/coverage report bundle as artefact'
    required: false
    # type: boolean
    default: 'true'
  path_prefix:
    description: 'Directory location containing Python project code'
    # type: string
    required: false
    default: '.'
  tests_path:
    description: 'Path relative to the project folder containing tests'
    required: false
    # type: string
  tox_tests:
    description: 'Uses tox to perform tests'
    required: false
    # type: boolean
    default: 'false'
  tox_envs:
    description: 'Space separated list of tox environments to run'
    required: false
    # type: string

runs:
  using: 'composite'
  steps:
    - name: 'Setup action/environment'
      shell: bash
      run: |
        # Setup action/environment
        if [ -z "${{ inputs.python_version }}" ]; then
          echo 'Error: Python version was not provided ‚ùå'; exit 1
        else
          echo "Using Python: ${{ inputs.python_version }} üêç"
        fi

        # Verify path_prefix is a valid directory path
        if [ ! -d "${{ inputs.path_prefix }}" ]; then
          echo 'Error: invalid path/prefix to project directory ‚ùå'; exit 1
        fi

        # The coverage report location will also use this environment variable
        tox_envs=$(echo "py${{ inputs.python_version }}" | sed 's/\.//g')
        echo "tox_envs=$tox_envs" >> "$GITHUB_ENV"

        # Setup dedicated coverage report directory outside project path
        coverage_dir="/tmp/coverage-$tox_envs"
        mkdir -p "$coverage_dir"
        echo "coverage_dir=$coverage_dir" >> "$GITHUB_ENV"
        echo "Coverage report output location: $coverage_dir üí¨"

        if [ "f${{ inputs.permit_fail }}" = 'ftrue' ]; then
          echo 'Warning: test failures will be permitted ‚ö†Ô∏è'
        fi

        # Testing with TOX
        if [ "f${{ inputs.tox_tests }}" = 'ftrue' ]; then
          echo 'Using tox to perform tests üí¨'
          if [ -z "${{ inputs.tox_envs }}" ]; then
            echo 'Using tox environment derived from matrix Python version'
            echo "Using current matrix python version: $tox_envs"
          else
            tox_envs="${{ inputs.tox_envs }}"
            echo "Testing with tox environments: ${{ inputs.tox_envs }} üí¨"
          fi
          echo "tox_envs=$tox_envs" >> "$GITHUB_ENV"
        fi

        # Check/setup test path
        if [ -n "${{ inputs.tests_path }}" ] && \
          [ ! -d "${{ inputs.path_prefix }}/${{ inputs.tests_path }}" ]; then
          echo 'Error: invalid path/prefix to test directory ‚ùå'
          echo "${{ inputs.path_prefix }}/${{ inputs.tests_path }}"; exit 1
        fi
        if [ -n "${{ inputs.tests_path }}" ]; then
          TESTS_PATH="${{ inputs.path_prefix }}/${{ inputs.tests_path }}"
        # Otherwise search/use common locations
        elif [ -d "${{ inputs.path_prefix }}/test" ]; then
          TESTS_PATH="${{ inputs.path_prefix }}/test"
        elif [ -d "${{ inputs.path_prefix }}/tests" ]; then
          TESTS_PATH="${{ inputs.path_prefix }}/tests"
        else
          echo 'Error: could not determine path to tests ‚ùå'; exit 1
        fi
        echo "Tests path: $TESTS_PATH üí¨"
        echo "tests_path=$TESTS_PATH" >> "$GITHUB_ENV"

    - name: 'Check for data_file in pyproject.toml'
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/file-grep-regex-action@64fbf6bd3315530c6819e16c5b065e3bfc4f16d9 # v0.1.3
      id: cov-run
      with:
        flags: '-E'
        regex: '^data_file\s*=.*'
        filename: "${{ inputs.path_prefix }}/pyproject.toml"
        no_fail: 'true'

    - name: 'Warning: coverage temporary files'
      if: steps.cov-run.outputs.extracted_string == ''
      shell: bash
      run: |
        # Warning: coverage temporary files
        echo "Warning: coverage report temporary files ‚ö†Ô∏è"
        echo "Tests sensitive to file system content may break"
        echo "Set data_file parameter in pyproject.toml to avoid this warning"

    - name: 'Check for tox configuration file'
      if: inputs.tox_tests == 'true'
      id: tox-config
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/path-check-action@aa7dabfa92e50e31a0f091dd3e2741692e8dde07 # v0.1.5
      with:
        path: "${{ inputs.path_prefix }}/tox.ini"

    - name: 'Tox configuration file missing'
      # yamllint disable-line rule:line-length
      if: steps.tox-config.outputs.type != 'file' && inputs.tox_tests == 'true'
      shell: bash
      run: |
        # Tox configuration file missing
        echo 'Error: tox configuration file missing ‚ùå'; exit 1

    - name: "Set up Python ${{ inputs.python_version }}"
      # yamllint disable-line rule:line-length
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: "${{ inputs.python_version }}"

    - name: 'Cache Python dependencies'
      # yamllint disable-line rule:line-length
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.0.2
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pypoetry
          ~/.cache/pipenv
          .venv
          .tox
        # yamllint disable rule:line-length
        key: >-
          python-${{ runner.os }}-${{ inputs.python_version }}-
          ${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/poetry.lock', '**/Pipfile*', '**/setup.py', '**/setup.cfg') }}
        restore-keys: |
          python-${{ runner.os }}-${{ inputs.python_version }}-
          python-${{ runner.os }}-
        # yamllint enable rule:line-length

    - name: 'Performing tests [tox]'
      if: steps.tox-config.outputs.type == 'file' && inputs.tox_tests == 'true'
      shell: bash
      run: |
        # Performing tests [tox]
        echo 'Installing: tox ‚¨áÔ∏è'
        # Under Python 3.8, use a compatible tox release, latest for others
        if [[ "${{ inputs.python_version }}" == "3.8" ]]; then
          echo 'Using tox<4.0.0 for Python 3.8 compatibility'
          pip install --disable-pip-version-check -q 'tox<4.0.0'
        else
          echo 'Using latest tox version'
          pip install --disable-pip-version-check -q tox
        fi
        if [ -n "${{ env.tox_envs }}" ]; then
          for ENV in "${{ env.tox_envs }}"; do
            echo "Running: tox -c ${{ inputs.path_prefix }}/tox.ini -e $ENV üí¨"
            tox -c "${{ inputs.path_prefix }}/tox.ini" -e "$ENV"
          done
        else
          echo 'Running: tox -c ${{ inputs.path_prefix }}/tox.ini üí¨'
          tox -c "${{ inputs.path_prefix }}/tox.ini"
        fi

    - name: 'Install project and test/dev dependencies [pytest]'
      if: inputs.tox_tests != 'true'
      shell: bash
      run: |
        # Install project and test/dev dependencies

        # Important note: package installation order matters
        # Install the package (editable or not) before installing test runners
        # (like pytest and coverage) to ensure the latest code is used
        echo 'Install project and test/dev dependencies (before pytest install)'
        if [ -f "${{ inputs.path_prefix }}/pyproject.toml" ]; then
          echo "Source: ${{ inputs.path_prefix }}/pyproject.toml ‚¨áÔ∏è"
          # First try to install with test dependencies
          if pip install -e "${{ inputs.path_prefix }}[test,dev]"; then
            echo 'Successfully installed test and dev dependencies ‚úÖ'
          elif pip install -e "${{ inputs.path_prefix }}[test]"; then
            echo 'Successfully installed test dependencies ‚úÖ'
          else
            echo 'Fallback: installing base package only ‚ö†Ô∏è'
            pip install -e "${{ inputs.path_prefix }}"
          fi
        elif [ -f "${{ inputs.path_prefix }}/requirements.txt" ]; then
          echo "Source: ${{ inputs.path_prefix }}/requirements.txt ‚¨áÔ∏è"
          pip install -r "${{ inputs.path_prefix }}/requirements.txt"
        fi

        echo 'Installing: pytest, pytest-cov, coverage[toml] ‚¨áÔ∏è'
        pip install --disable-pip-version-check -q \
          pytest \
          pytest-cov \
          coverage\[toml\]

    - name: 'Run tests and coverage report [pytest]'
      if: inputs.tox_tests != 'true'
      shell: bash
      run: |
        # Tests and coverage report [pytest]

        # Setup XML coverage report for upload as artefact
        if [ ${{ inputs.report_artefact }} = 'true' ]; then
          coverage_flags="--cov-report=term-missing \
          --cov-report=xml:/tmp/coverage-$tox_envs/coverage.xml \
          --cov-config=${{ inputs.path_prefix }}/pyproject.toml"
        fi

        echo "Running tests in: ${{ env.tests_path }} üß™"
        if [ "f${{ inputs.permit_fail }}" = 'ftrue' ]; then
          echo 'Warning: flag set to permit test failures ‚ö†Ô∏è'
          pytest \
            $coverage_flags \
            ${{ env.tests_path }} || true
        else
          pytest \
            $coverage_flags \
            ${{ env.tests_path }}
        fi

    - name: 'Upload test/coverage report'
      # yamllint disable-line rule:line-length
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: inputs.report_artefact == 'true'
      with:
        name: "${{ env.tox_envs }}-coverage.xml"
        # yamllint disable-line rule:line-length
        path: "${{ env.coverage_dir }}/coverage.xml"
        retention-days: 90
